---
- name: Process Dynatrace EDA event
  hosts: localhost

  vars:
    problem_view: "/ui/apps/dynatrace.classic.problems/#problems"

  tasks:
    - name: Get problem details
      register: r_problem
      ansible.builtin.uri:
        url: "{{ lookup('env', 'DYNATRACE_HOST') }}/api/v2/problems/{{ ansible_eda.event['problemId'] }}"
        method: GET
        headers:
          Authorization: "Api-Token {{ lookup('env', 'DYNATRACE_API_TOKEN') }}"

    - name: Get problem hosts affected
      register: r_hosts
      loop: "{{ r_problem.json | dt_problem_hosts }}"
      loop_control:
        loop_var: host_id
      ansible.builtin.uri:
        url: "{{ lookup('env', 'DYNATRACE_HOST') }}/api/v2/entities/{{ host_id }}"
        method: GET
        headers:
          Authorization: "Api-Token {{ lookup('env', 'DYNATRACE_API_TOKEN') }}"

    - name: Get EC2 instances affected
      register: r_ec2_instances
      loop: "{{ r_hosts.results | map(attribute='json') | list }}"
      loop_control:
        loop_var: host
      ansible.builtin.uri:
        url: "{{ lookup('env', 'DYNATRACE_HOST') }}/api/v2/entities/{{ host['fromRelationships']['runsOn'][0]['id'] }}"
        method: GET
        headers:
          Authorization: "Api-Token {{ lookup('env', 'DYNATRACE_API_TOKEN') }}"

    - name: Setup hosts for next play
      ansible.builtin.set_fact:
        problem_ec2_instances: "{{ r_ec2_instances.results | json_query('[].json.properties.publicHostName') }}"

    - name: Setup attachment files
      ansible.builtin.set_fact:
        attachment_files:
          - path: /tmp/event_info.json
            data: "{{ ansible_eda.event | to_nice_json }}"
          - path: /tmp/instance_info.json
            data: "{{ r_ec2_instances.results | json_query('[].json') | to_nice_json }}"
          - path: /tmp/ansible_facts.json
            data: "{{ ansible_facts | to_nice_json }}"

    - name: Create attachments
      loop: "{{ attachment_files }}" 
      ansible.builtin.copy:
        content: "{{ item.data }}"
        dest: "{{ item.path }}"

    - name: Create incident
      register: r_incident
      servicenow.itsm.incident:
        state: new
        caller: admin
        short_description: "{{ ansible_eda.event['title'] }}"
        description: Ansible EDA generated event based on Dynatrace Problems API
        impact: low
        urgency: low
        attachments: "{{ attachment_files | json_query('[].{path: path}') }}"
        other:
          comments: >
            [code]
            <p>Impacted: {{ ansible_eda.event['impactLevel']  }}</p>
            <p>Impact Type: {{ ansible_eda.event['severityLevel']  }}</p>
            <p>
              <a href="{{ lookup('env', 'DYNATRACE_HOST') }}/{{ problem_view }}/problemdetails;gtf=-6h;gf=all;pid={{ ansible_eda.event['problemId'] }}">
                View Problem Details
              </a>
            </p>
            [/code]

- name: Remediate Problem
  hosts: problem_ec2_instances
  gather_facts: true
  
  tasks:
    - name: "Add incident comments | {{ inventory_hostname }} facts"
      delegate_to: localhost
      servicenow.itsm.incident:
        sys_id: "{{ problem_sys_id }}"
        other:
          comments: "[code]<h3>{{ inventory_hostname }} Facts</h3>[/code]{{ ansible_facts | to_nice_json | codify }}"

    - name: Start httpd
      become: true
      ansible.builtin.service:
        name: httpd
        state: started

    - name: Close incident
      delegate_to: localhost
      servicenow.itsm.incident:
        sys_id: "{{ problem_sys_id }}"
        state: closed
        close_code: "Solved (Permanently)"
        close_notes: "Dynatrace + Event-Driven Ansible auto-remediation successful"

    - name: Close Dynatrace problem
      delegate_to: localhost
      ansible.builtin.uri:
        url: "{{ lookup('env', 'DYNATRACE_HOST') }}/api/v2/problems/{{ dt_problem_id }}/close"
        method: POST
        headers:
          Authorization: "Api-Token {{ lookup('env', 'DYNATRACE_API_TOKEN') }}"
        body_format: json
        body:
          message: "Dynatrace + Event-Driven Ansible auto-remediation successful"
